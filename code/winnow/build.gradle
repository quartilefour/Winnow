plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'jacoco'
	apply plugin: 'idea'

	group = 'com.cscie599.gfn'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '1.8'

	repositories {
		mavenCentral()
	}

	configurations {
		all {
			exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		}
		developmentOnly
		runtimeClasspath {
			extendsFrom developmentOnly
		}
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	dependencies {
		compile group: 'commons-io', name: 'commons-io', version: '2.5'
		compile group: 'commons-net', name: 'commons-net', version: '3.6'
		compile 'org.springframework.boot:spring-boot-starter-batch'
		compile 'org.springframework.boot:spring-boot-starter-data-jpa'
		compile 'org.springframework.boot:spring-boot-starter-jersey'
		compile 'com.thoughtworks.xstream:xstream:1.4.11.1'
		compile 'org.springframework:spring-oxm'
		compile 'org.springframework.boot:spring-boot-starter-security'
		compile 'org.springframework.boot:spring-boot-starter-web'
		compile 'io.springfox:springfox-swagger2:2.9.2'
		compile 'io.springfox:springfox-swagger-ui:2.9.2'
		compile 'org.slf4j:slf4j-simple:1.7.30'
		compile 'com.vladmihalcea:hibernate-types-52:2.9.7'
		compile("com.auth0:java-jwt:3.4.0")
		compile('org.springframework.boot:spring-boot-starter-log4j2')
		compile('commons-validator:commons-validator:1.6')
		testCompile('org.springframework.boot:spring-boot-starter-test')
		compileOnly 'org.projectlombok:lombok'
		compile("org.springframework.boot:spring-boot-starter-actuator")
		//developmentOnly 'org.springframework.boot:spring-boot-devtools'
		runtimeOnly 'org.postgresql:postgresql'
		annotationProcessor 'org.projectlombok:lombok'
		compile 'org.springframework.boot:spring-boot-starter-tomcat'
		compile 'com.google.code.findbugs:annotations:3.0.1'
		compile group: 'org.apache.commons', name: 'commons-text', version: '1.8'
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
		testImplementation 'org.springframework.batch:spring-batch-test'
		testImplementation 'io.zonky.test:embedded-database-spring-test:1.5.3'
		testCompile "junit:junit:4.12"
		testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
		testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.4'
        compile "org.jsoup:jsoup:1.12.1"
		compile 'org.javatuples:javatuples:1.2'
		compile 'org.apache.commons:commons-numbers-gamma:1.0-beta1'
		compile 'de.siegmar:fastcsv:1.0.3'
    }

	test {
		useJUnitPlatform()
	}

	jacoco {
		toolVersion = "0.8.5"
	//	reportsDir = file("$buildDir/customJacocoReportDir")
	}

	jacocoTestReport {
		reports {
			xml.enabled false
			csv.enabled false
	//		html.destination file("${buildDir}/jacocoHtml")
		}

		// needed for report - if you use source sets it'll bring in all deps into the report
		def classTree = fileTree(dir: 'build/classes/java/main', include: 'com/cscie599/**', excludes: ['**/entities/**','**/*App*'])
		// maybe omit classes from the report
		//classTree.excludes ['**/entities/**','**/*App']
		classDirectories.from = classTree

		// needed for source highlight
		sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
	}
	test.finalizedBy(jacocoTestReport)
}